generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CLIENT
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  phone     String   @unique
  role      Role
  createdAt DateTime @default(now())

  addresses Address[]
  orders    Order[]
  favorites Favorite[]

  restaurant Restaurant?

  @@unique([email, phone])
  @@map("users")
}

model Address {
  id        String   @id @default(uuid())
  zipCode   String
  address   String
  number    Int?
  district  String
  city      String
  uf        String   @db.Char(2)
  alias     String?
  main      Boolean  @default(false)
  createdAt DateTime @default(now())

  client   User   @relation(fields: [clientId], references: [id])
  clientId String

  orders Order[]

  @@map("addresses")
}

model Category {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())

  restaurants Restaurant[]

  @@map("categories")
}

model Restaurant {
  id           String   @id @default(uuid())
  name         String
  phone        String   @unique
  tax          Decimal  @db.Money
  deliveryTime Int
  image        String?
  createdAt    DateTime @default(now())

  admin   User   @relation(fields: [adminId], references: [id])
  adminId String @unique

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  hours     Hour[]
  products  Product[]
  orders    Order[]
  favorites Favorite[]

  @@map("restaurants")
}

model Hour {
  id        String   @id @default(uuid())
  weekday   Int
  openedAt  Int
  closedAt  Int
  open      Boolean  @default(true)
  createdAt DateTime @default(now())

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String

  @@map("hours")
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String   @db.Text
  price       Decimal  @db.Money
  available   Boolean  @default(true)
  image       String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String

  orderItems OrderItem[]

  @@map("products")
}

enum OrderStatus {
  PENDING
  PREPARING
  ROUTING
  DELIVERED
  CANCELED
}

enum PaymentMethod {
  CARD
  CASH
  PIX
}

model Order {
  id         String        @id @default(uuid())
  date       DateTime      @default(now())
  status     OrderStatus   @default(PENDING)
  payment    PaymentMethod
  total      Decimal       @db.Money
  grade      Int?
  comment    String?       @db.Text
  ratingDate DateTime?
  createdAt  DateTime      @default(now())

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String

  client   User   @relation(fields: [clientId], references: [id])
  clientId String

  address   Address @relation(fields: [addressId], references: [id])
  addressId String

  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(uuid())
  quantity  Int
  price     Decimal  @db.Money
  createdAt DateTime @default(now())

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@map("orderItems")
}

model Favorite {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  client   User   @relation(fields: [clientId], references: [id])
  clientId String

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String

  @@unique([clientId, restaurantId])
  @@map("favorites")
}
